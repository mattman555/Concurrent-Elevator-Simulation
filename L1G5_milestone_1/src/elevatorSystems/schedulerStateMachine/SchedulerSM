package elevatorSystems.schedulerStateMachine;

import java.util.ArrayList;
import java.util.Map.Entry;

import elevatorSystems.Direction;
import elevatorSystems.Elevator;
import elevatorSystems.FloorSubsystem;
import elevatorSystems.Scheduler;
import elevatorSystems.schedulerStateMachine.AwaitingRequests;
import elevatorSystems.schedulerStateMachine.InProgress;
import elevatorSystems.schedulerStateMachine.UnsortedRequests;
import elevatorSystems.schedulerStateMachine.SortedRequests;



public class SchedulerSM implements Runnable {
	private SchedulerState[] states;
	private int current;
	private int[][] transitions = {{2,1,5},{2},{3},{4},{0}};
	public Elevator elevator;
	public boolean printed;
	private Scheduler scheduler;
	
	
	/**
	* 
	*/
	public SchedulerSM(Scheduler scheduler, Elevator elevator) {
		this.elevator =  elevator;
		this.scheduler = scheduler;
		SchedulerState[] statearr =
			{new AwaitingRequests(this.scheduler, this.elevator), 
			 new UnsortedRequests(this.scheduler), 
			 new SortedRequests(this.scheduler, this.elevator), 
			 new InProgress(this.scheduler,this.elevator)};
		states = statearr;
		current = 0;
	}
	
	private void nextState(int nextState) {
		 current = transitions[current][nextState];
   }
	
	public void RequestTask(Entry<Integer,Direction> destination) {
		states[current].RequestTask(destination);
	}
	
	public void getListOfRequests() {

		while(!scheduler.floorisDone()) {
			
		}
		System.out.println("Scheduler request are ready");
		//nextState(1);
	}
	
	public void SortRequests() {
		states[current].SortRequests();
		nextState(3);
	}
	
	public void setNewInProgressBucket() {
		states[current].setNewInProgressBucket();
		nextState(1);
	}
	
	public void RequestIsCurrentlocation() {
		states[current].RequestIsCurrentlocation();
	}
	
	public void RemoveDestination() {
		states[current].RemoveDestination();
	}
	
	public void GiveNewDestination() {
		states[current].GiveDestination();
	}
	
	public void RequestsNewDestination() {
		states[current].RequestsNewDestination();
	}

	public void exit() {
		states[current].exit();
		current = 6;
	}
	
	
	@Override
	/**
	 * The running of the elevator, travel to new floor, updating lamps
	 */
	public void run() {

		
		while (true) {
			switch(current) {
				case 0:
					//Scheduler waiting for requests
					
					System.out.println("Scheduler waiting for all requests");
					this.getListOfRequests();
					
					
						//if (!scheduler.requestsready) {
						//	if (!printed) {
						//		System.out.println("Scheduler waiting for all requests");
						//		printed = true;
						//	}
						//}
						//else {
						//	current = 1;
						//	printed = false;
						//}
						current= 1;
						break;
				case 1:
					//Unsorted requests
					System.out.println("Scheduler sorting requests");
					scheduler.sortRequestsIntoGroups();
					current = 2;
					break;
				case 2:
					//Sorted requests
					
					break;
				case 3:
					//Progress bucket
					
					current= 4; 
					break;
				case 4: 
					//Final state 
					this.exit();
					
					break;
				}
		}
	}
	
}
